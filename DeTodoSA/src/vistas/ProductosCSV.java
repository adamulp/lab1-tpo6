/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vistas;

import entidades.Producto;
import entidades.Rubro;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeSet;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import vistas.SelectorDeArchivos;

/**
 *
 * @author adam
 */
public class ProductosCSV extends javax.swing.JInternalFrame {

    private TreeSet<Producto> productos;
    private DefaultTableModel modelo = new DefaultTableModel();
    private String headerText;
    private String rubroNames;
    private HashMap<String, Rubro> rubroMap = new HashMap<>();

    public ProductosCSV(TreeSet<Producto> productos) {
        initComponents();
        this.productos = productos;
        armarTabla();
        cargarTabla();
        headerText = "Código, Rubro, Descripción, Precio, Stock";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtRutaArchivo = new javax.swing.JTextArea();
        btnExploradorArchivos = new javax.swing.JButton();
        btnAgregarProducto = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btnAgregarFila = new javax.swing.JButton();
        btnQuitarFila = new javax.swing.JButton();
        btnGuardarCSV = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableCSVListado = new javax.swing.JTable();
        jtFilePath = new javax.swing.JTextField();
        btnFilePicker = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        btnActualizarProductos = new javax.swing.JButton();
        btnRecargar = new javax.swing.JButton();

        txtRutaArchivo.setColumns(20);
        txtRutaArchivo.setRows(5);
        jScrollPane2.setViewportView(txtRutaArchivo);

        btnExploradorArchivos.setText("Archivo CSV");
        btnExploradorArchivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExploradorArchivosActionPerformed(evt);
            }
        });

        btnAgregarProducto.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        btnAgregarProducto.setText("+");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/tacho.png"))); // NOI18N

        jButton2.setText("Guardar");

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addComponent(btnExploradorArchivos)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addComponent(btnAgregarProducto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnExploradorArchivos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAgregarProducto)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnAgregarFila.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        btnAgregarFila.setText("+");
        btnAgregarFila.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarFilaActionPerformed(evt);
            }
        });

        btnQuitarFila.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/tacho.png"))); // NOI18N
        btnQuitarFila.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarFilaActionPerformed(evt);
            }
        });

        btnGuardarCSV.setText("Guardar CSV");
        btnGuardarCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarCSVActionPerformed(evt);
            }
        });

        jTableCSVListado.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jTableCSVListado.setForeground(new java.awt.Color(0, 0, 0));
        jTableCSVListado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Código", "Rubro", "Descripcion", "Precio", "Stock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableCSVListado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTableCSVListadoKeyTyped(evt);
            }
        });
        jScrollPane4.setViewportView(jTableCSVListado);

        jtFilePath.setEditable(false);
        jtFilePath.setBackground(new java.awt.Color(214, 217, 223));
        jtFilePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtFilePathActionPerformed(evt);
            }
        });

        btnFilePicker.setText("Archivo:");
        btnFilePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilePickerActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnActualizarProductos.setText("Actualizar Productos");
        btnActualizarProductos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarProductosActionPerformed(evt);
            }
        });

        btnRecargar.setText("Recargar Lista");
        btnRecargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecargarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAgregarFila, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnQuitarFila, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(btnRecargar, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnActualizarProductos)
                        .addGap(42, 42, 42)
                        .addComponent(btnSalir))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnFilePicker)
                        .addGap(18, 18, 18)
                        .addComponent(jtFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnGuardarCSV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(76, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 370, Short.MAX_VALUE)
                    .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 371, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFilePicker)
                    .addComponent(btnGuardarCSV, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAgregarFila, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnQuitarFila)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSalir)
                        .addComponent(btnActualizarProductos)
                        .addComponent(btnRecargar)))
                .addGap(27, 27, 27))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 250, Short.MAX_VALUE)
                    .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 251, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExploradorArchivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExploradorArchivosActionPerformed
//        JFileChooser fileChooser = new JFileChooser();
//        int returnValue = fileChooser.showOpenDialog(CSV.this);
    }//GEN-LAST:event_btnExploradorArchivosActionPerformed

    private void jtFilePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtFilePathActionPerformed
//        ExploradorArchivos filePicker = new ExploradorArchivos();
//        int returnValue = fileChooser.showOpenDialog(CSV.this);
//        FilePicker explorador = new FilePicker();
//        dibujarVentana(explorador);
    }//GEN-LAST:event_jtFilePathActionPerformed

    private void btnFilePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilePickerActionPerformed
        if(seleccionarArchivo()){
            cargarDatosCSV(jtFilePath.getText());
            return;
        }
        JOptionPane.showMessageDialog(this,
                    "No se pudo abrir el archivo :(");
    }//GEN-LAST:event_btnFilePickerActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnAgregarFilaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarFilaActionPerformed
        agregarFilaEnBlanco();
    }//GEN-LAST:event_btnAgregarFilaActionPerformed

    private void btnQuitarFilaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarFilaActionPerformed
        int[] filas = jTableCSVListado.getSelectedRows();

        for (int i = filas.length - 1; i >= 0; i--) {
            Object val = jTableCSVListado.getValueAt(filas[i], 0); // Use filas[i] as the row index
            if (val != null) {
                Integer codigo = getJtCodigo(filas[i]); // Use filas[i] as the row index
                if(quitarProducto(codigo)){
                    modelo.removeRow(filas[i]);
                } else {
                    JOptionPane.showMessageDialog(this,
                            "Hubo un error al intentar quitar el producto "
                            + "con código=" + codigo + ". "
                            + "Por favor, intenta desde otro contexto.");
                }
            }
        }
    }//GEN-LAST:event_btnQuitarFilaActionPerformed

    private void jTableCSVListadoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableCSVListadoKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableCSVListadoKeyTyped

    private void btnGuardarCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarCSVActionPerformed
        exportarCSV();
    }//GEN-LAST:event_btnGuardarCSVActionPerformed

    private void btnActualizarProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarProductosActionPerformed
        int numFilas = modelo.getRowCount();
        boolean huboValoreEnBlanco = false;
        boolean algoNoSePudoCargar = false;

        for (int i = numFilas - 1; i >= 0; i--) {
            Integer codigo = getJtCodigo(i);
            quitarProducto(codigo);
            Rubro rubro = getJtRubro(i);
            String descripcion = (String) jTableCSVListado.getValueAt(i, 2);
            Double precio = getJtPrecio(i);
            Integer stock = getJtStock(i);

            if (codigo == null
                    || rubro == null
                    || descripcion == null
                    || precio == null
                    || stock == null) {
                huboValoreEnBlanco = true;
            } else {
                Producto producto = new Producto(codigo, descripcion, precio,
                        stock, rubro);

                if (productos.add(producto)) {
                    modelo.removeRow(i);
                } else {
                    algoNoSePudoCargar = true;
                }
            }
        }
        if (huboValoreEnBlanco) {
            JOptionPane.showMessageDialog(this,
                    "Hubo campos en blanco de productos que no se pudieron "
                    + "agregar al actualizar la cosa. Quitamos lo demás de"
                    + "esta vista por si querés actualizar lo que queda en "
                    + "blanco por ahí");
        } else if(algoNoSePudoCargar){
            JOptionPane.showMessageDialog(this,
                    "Hubo por lo menso un producto que no se pudo "
                    + "agregar al coso de productos. Quitamos lo demás de"
                    + "esta vista por si querés intentar de nuevo.");

        }else{
            JOptionPane.showMessageDialog(this,
                    "¡joya!, se cargó todo. Igual, podés recargar la lista "
                            + "si querés revisar otra cosa desde acá.");
        }
        
        jtFilePath.setText("");

    }//GEN-LAST:event_btnActualizarProductosActionPerformed

    private void btnRecargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecargarActionPerformed
        limpiarTabla();
        cargarTabla();
        jtFilePath.setText("");
    }//GEN-LAST:event_btnRecargarActionPerformed

    private boolean esEntero(String nro) {
        Pattern patron = Pattern.compile("^\\d+$");
        Matcher m = patron.matcher(nro);
        return m.matches();
    }

    private Producto getProducto(Integer codigo) {
        if (codigo == null) {
            return null;
        }
        for (Producto producto : productos) {
            if (codigo == producto.getCodigo()) {
                return producto;
            }
        }
        return null;
    }

    private boolean agregarProducto(Producto producto) {
        if (producto == null) {
            return false;
        }
        return productos.add(producto);
    }

    private boolean quitarProducto(Producto producto) {
        return productos.remove(producto);
    }

    private boolean quitarProducto(Integer codigo) {
        if (codigo == null) {
            return false;
        }
        Producto producto = new Producto();
        producto = getProducto(codigo);
        if (producto == null) {
            return false;
        }
        return quitarProducto(producto);
    }

    private boolean actualizarProducto(int codigo, Producto producto) {
        if (producto == null) {
//            System.out.println("El producto es nulo");
            return false;
        }
        if (quitarProducto(codigo)) {
            return agregarProducto(producto);
        }
        return false;
    }

    private void armarTabla() {
        modelo.addColumn("Codigo");
        modelo.addColumn("Rubro");
        modelo.addColumn("Descripcion");
        modelo.addColumn("Precio");
        modelo.addColumn("Stock");
        jTableCSVListado.setModel(modelo);
        jTableCSVListado.setRowHeight(30);

        // Crear un JComboBox
        JComboBox<Rubro> jcRubro = new JComboBox<>();
        Rubro comestible = new Rubro(1, "Comestible");
        Rubro limpieza = new Rubro(2, "Limpieza");
        Rubro perfumeria = new Rubro(3, "Perfumeria");

        jcRubro.addItem(comestible);
        jcRubro.addItem(limpieza);
        jcRubro.addItem(perfumeria);

        rubroNames = "";
        for (int i = 0; i < jcRubro.getItemCount(); i++) {
            Rubro rubro = jcRubro.getItemAt(i);
            rubroNames += rubro.getNombre();
            if (i < jcRubro.getItemCount() - 1) {
                rubroNames += "|";
            }
            rubroMap.put(rubro.getNombre(), rubro);
        }

        // Set the custom cell editor for the second column
        jTableCSVListado.getColumnModel().getColumn(1).setCellEditor(
                new DefaultCellEditor(jcRubro));

        jTableCSVListado.getColumnModel().getColumn(0).setCellEditor(
                new EditorEnteros(jTableCSVListado, true));
        jTableCSVListado.getColumnModel().getColumn(3).setCellEditor(
                new EditorDecimales());
        jTableCSVListado.getColumnModel().getColumn(4).setCellEditor(
                new EditorEnteros());

    }
    
    public void cargarTabla() {
        for (Producto producto : this.productos) {
            cargarRenglones(producto);
        }
        jTableCSVListado.repaint();
        jTableCSVListado.revalidate();
    }
    
    public void limpiarTabla(){
        int numFilas = modelo.getRowCount();
        for (int i = numFilas - 1; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }
    
    public void agregarFilaEnBlanco() {
        Vector fila = new Vector();
        for (Field field : Producto.class.getDeclaredFields()) {
            fila.add(null);
        }
        modelo.addRow(fila);
    }

    public void cargarRenglones(Producto producto) {
        Vector fila = new Vector();

        fila.add(producto.getCodigo());
        fila.add(producto.getRubro().toString());
        fila.add(producto.getDescripcion());
        fila.add(producto.getPrecio());
        fila.add(producto.getStock());
        modelo.addRow(fila);

        System.out.println("Cargando un producto:" + fila);
    }

    public void borrarLista() {
        int filas = modelo.getRowCount() - 1;
        for (int i = filas; i >= 0; i--) {
            modelo.removeRow(i);
        }

    }

    private String getRelativePath(File file) {
        File baseDir = new File(".");
        return baseDir.toURI().relativize(file.toURI()).getPath();
    }

    public class EditorEnteros extends DefaultCellEditor implements KeyListener, TableCellEditor, CellEditorListener {

        private JTextField txtCampo;
        private JTable table;
        private boolean insistirUnico;
        private int fila;
        private int columna;

        public EditorEnteros(JTable table, boolean insistirUnico) {
            super(new JTextField());
            this.insistirUnico = insistirUnico;
            this.table = table;
            txtCampo = (JTextField) getComponent();
            txtCampo.addKeyListener(this);
            addCellEditorListener(this);

//            txtCampo.addFocusListener(new FocusAdapter() {
//                @Override
//                public void focusLost(FocusEvent e) {
//                    // Check for uniqueness when focus is lost
//                    if (insistirUnico && table != null && table.isEditing()) {
//                        int column = table.getEditingColumn();
//                        int row = table.getEditingRow();
//                        String newValue = txtCampo.getText();
//                        if (!esUnico(table, column, newValue)) {
//                            JOptionPane.showMessageDialog(table,
//                                    "El valor tiene que ser único.");
//                            // Perform additional actions as needed, such as reverting the value or highlighting the cell
//                        }
//                    }
//                }
//            });
        }

        public EditorEnteros(JTable table) {
            this(table, false);
        }

        public EditorEnteros() {
            this(null, false);
        }

        @Override
        public void editingStopped(ChangeEvent e) {
            if (insistirUnico) {
                String newValue = txtCampo.getText();

                if (!esUnico(table, newValue)) {
                    JOptionPane.showMessageDialog(table,
                            "El valor tiene que ser único.");
                    SwingUtilities.invokeLater(() -> {
                        // Restore focus to the text field of the last edited cell
                        table.editCellAt(fila, columna);
                        Component editor = table.getEditorComponent();
                        if (editor != null) {
                            editor.requestFocusInWindow();
                        }
                    });
                    return;
                }
            }
        }

        @Override
        public void keyTyped(KeyEvent evt) {
            char caracter = evt.getKeyChar();
            if (!Character.isDigit(caracter)) {
                evt.consume();
            }
        }

        @Override
        public void keyPressed(KeyEvent e) {
        }

        @Override
        public void keyReleased(KeyEvent e) {
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            // Store the last editing row and column
            fila = row;
            columna = column;

            // Return the text field component
            return super.getTableCellEditorComponent(table, value, isSelected, row, column);
        }

        private boolean esUnico(JTable table, String value) {
            // Check if the entered value is unique in the column
//            System.out.println("table.getRowCount()=" + table.getRowCount());
//            System.out.println("column=" + column);
            for (int i = 0; i < table.getRowCount(); i++) {
                Object aux = table.getValueAt(i, columna);
                if (aux != null && i != fila && value.equals(aux.toString())) {
                    return false;
                }
            }
            return true;
        }

//        private boolean esUnico(JTable table, int column, String value) {
//            System.out.println("Checking uniqueness for value: " + value);
//            // Check if the entered value is unique in the column
//            Object aux = null;
//            for (int i = 0; i < table.getRowCount(); i++) {
//                aux = table.getValueAt(i, column);
//                if (aux != null && i != table.getEditingRow()) {
//                    System.out.println("Comparing with value at row " + i + ": " + aux);
//                    if (value.equals(aux.toString())) {
//                        System.out.println("Not unique. Value already exists.");
//                        return false;
//                    }
//                }
//            }
//            System.out.println("Unique value.");
//            return true;
//        }
        @Override
        public void editingCanceled(ChangeEvent e) {
        }

    }

    public class EditorDecimales extends DefaultCellEditor implements KeyListener {

        private JTextField txtCampo;

        public EditorDecimales() {
            super(new JTextField());
            txtCampo = (JTextField) getComponent();
            txtCampo.addKeyListener(this);
        }

        @Override
        public void keyTyped(KeyEvent evt) {
            char caracter = evt.getKeyChar();
            char separadorDecimal = '.';
            String txtActual;

            if (caracter == separadorDecimal) {
                txtActual = txtCampo.getText();
                for (int i = 0; i < txtActual.length(); i++) {
                    if (txtActual.charAt(i) == separadorDecimal) {
                        evt.consume();
                        return;
                    }
                }

                return;
            }

            if (!Character.isDigit(caracter)) {
                evt.consume();
            }

            txtActual = txtCampo.getText();
            int posDecimal = -1;
            int i = 0;
            while (i < txtActual.length() && posDecimal < 0) {
                if (txtActual.charAt(i) == separadorDecimal) {
                    posDecimal = i;
                }
                i++;
            }
            if (posDecimal < 0) {
                return;
            }
            if (txtCampo.getCaretPosition() < posDecimal) {
                return;
            }
            if (txtCampo.getCaretPosition() - posDecimal > 2) {
                evt.consume();
            }
        }

        @Override
        public void keyPressed(KeyEvent e) {
        }

        @Override
        public void keyReleased(KeyEvent e) {
        }
    }

    private void exportarCSV() {
        String filePath = jtFilePath.getText();
        if (filePath.equals("")) {
            if(!seleccionarArchivo()){
                JOptionPane.showMessageDialog(this,
                    "Tenés que elegir un archivo primero.");
            return;
            }
        }

        try {
            
            filePath = jtFilePath.getText();
            FileWriter writer = new FileWriter(filePath, false);
            writer.write(headerText);
            writer.write("\n");

            // Escribir datos
            for (int row = 0; row < jTableCSVListado.getRowCount(); row++) {
                for (int col = 0; col < jTableCSVListado.getColumnCount(); col++) {
                    writer.write(jTableCSVListado.getValueAt(row, col).toString());
                    if (col < jTableCSVListado.getColumnCount() - 1) {
                        writer.write(", ");
                    }
                }
                writer.write("\n");
            }

            writer.close();
            JOptionPane.showMessageDialog(this,
                    "Archivo CSV guardado exitosamente.");
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Error al guardar el archivo CSV: " + ex.getMessage());
        }
    }

    private void cargarDatosCSV(String filePath) {
        String regex = "^\\s*(\\d+)\\s*,\\s*\\b(?:" + rubroNames + ")\\b\\s*,\\s*([^,\\s]+)\\s*,\\s*\\d+(\\.\\d{1,2})?\\s*,\\s*\\d+\\s*$";
        Pattern pattern = Pattern.compile(regex);

//        DefaultTableModel model = (DefaultTableModel) jTableCSVListado.getModel();
//        model.setRowCount(0); // Clear previous data
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                Matcher matcher = pattern.matcher(line);
                if (matcher.matches()) {
                    String[] data = line.split(",\\s+");
                    for (int i = 0; i < data.length; i++) {
                        data[i] = data[i].trim();
                    }
                    modelo.addRow(data);
                } else {
                    // Handle lines that do not match the pattern (optional)
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Error al cargar el archivo CSV: " + e.getMessage());
        }

        if (blanquearDuplicados()) {
            JOptionPane.showMessageDialog(this,
                    "Hubo códigos por duplicado que borramos, "
                    + "tendrás que darles un valor "
                    + "antes de agregarlos al TreeSet de "
                    + "los productos");
        }
    }

    private boolean blanquearDuplicados() {
        int numFilas = modelo.getRowCount();
        boolean hayCodigosPorDuplicado = false;
        Set<Object> valoresUnicos = new HashSet<>();

        for (int row = 0; row < numFilas; row++) {
            Object value = modelo.getValueAt(row, 0); // Assuming the first column contains the values to check for duplicates
            if (valoresUnicos.contains(value)) {
                // Si ya hay otro producto con el mismo codigo, ponerlo como null
                modelo.setValueAt(null, row, 0);
                hayCodigosPorDuplicado = true;
            } else {
                // De otro modo, agregar el valor al conjunto de valores unicos.
                valoresUnicos.add(value);
            }
        }
        return hayCodigosPorDuplicado;
    }
    
    private Integer getJtCodigo(int fila){
        Object val = jTableCSVListado.getValueAt(fila, 0);
        if(val == null){
            return null;
        }
        if(val instanceof Integer){
            return (Integer) val;
        }
        return Integer.parseInt((String)val);
    }
    
    private Double getJtPrecio(int fila){
        Object val = jTableCSVListado.getValueAt(fila, 3);
        if(val == null){
            return null;
        }
        if(val instanceof Double){
            return (Double) val;
        }
        return Double.parseDouble((String)val);
    }
    
    private Integer getJtStock(int fila){
        Object val = jTableCSVListado.getValueAt(fila, 4);
        if(val == null){
            return null;
        }
        if(val instanceof Integer){
            return (Integer) val;
        }
        return Integer.parseInt((String)val);
    }
    
    private Rubro getJtRubro(int fila){
        Object val = jTableCSVListado.getValueAt(fila, 1);
        if(val == null){
            return null;
        }
        if(val instanceof Rubro){
            return (Rubro) val;
        }
        return rubroMap.get((String) val);
    }

    private Boolean seleccionarArchivo(){
        SelectorDeArchivos fileChooser = new SelectorDeArchivos(headerText, (long) 100000);
        fileChooser.setCurrentDirectory(new java.io.File("./test"));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("CSV Files", "csv");
        fileChooser.setFileFilter(filter);
//        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int returnValue = fileChooser.showOpenDialog(ProductosCSV.this);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            // User selected a file
            File selectedFile = fileChooser.getSelectedFile();
            String relativePath = getRelativePath(selectedFile);
            System.out.println("Relative path: " + relativePath);
            jtFilePath.setText(relativePath);
        } else {
            return false;
        }
        if (!jtFilePath.getText().equals("")) {
            return true;
        }
        return null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizarProductos;
    private javax.swing.JButton btnAgregarFila;
    private javax.swing.JButton btnAgregarProducto;
    private javax.swing.JButton btnExploradorArchivos;
    private javax.swing.JButton btnFilePicker;
    private javax.swing.JButton btnGuardarCSV;
    private javax.swing.JButton btnQuitarFila;
    private javax.swing.JButton btnRecargar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTableCSVListado;
    private javax.swing.JTextField jtFilePath;
    private javax.swing.JTextArea txtRutaArchivo;
    // End of variables declaration//GEN-END:variables

}
